// Define UI bindings
const form = document.querySelector('#db-task-from');
const taskList = document.querySelector('.collection');
const clearBtn = document.querySelector('.db-clear-tasks');
const filter = document.querySelector('#db-filter');
const taskInput = document.querySelector('#db-task');

// Order of function Expression does NOT matter. It's important to define them beffore call the first one.
// Later we should explorer how does it influence on performance
// But for now I follow the pricipe - the simplier is the better, so I Declare functions

// Load all event listeners
// Function  **Declarations** hoist the function definitions.
// NOTE: Function **Expressions** in JavaScript are NOT hoisted.
// Therefore, you **canNOT** use function expressions before defining them.

loadEventListeners();

// Define loadEventlisteners func

function loadEventListeners() {
  // DOM load event

  document.addEventListener('DOMContentLoaded', fetchTasks);

  // Add task events

  form.addEventListener('submit', addTask);

  // Remove task events

  taskList.addEventListener('click', removeTask);

  // Clear task event

  clearBtn.addEventListener('click', clearAllTasks);

  // Filter task event

  filter.addEventListener('keyup', filterTasks);
}

// Define addTask func

function addTask(e) {
  if (taskInput.value === '') {
    alert('Add a Task');
  }

  // Create li element

  const li = document.createElement('li');

  // Add a class

  li.className = 'collection-item';

  //  Create text node and append to li

  li.appendChild(document.createTextNode(taskInput.value));
  /* Cancel creating link element and just create an icon element
  // Create new link element

  // const link = document.createElement('a');

  // Add a class to link

  // link.className = 'db-delete-item secondary-content';
  */

  // Add icon html

  //  Here is icon from code awesome implmented by Brad

  // link.innerHTML = '<i class="fas fa-times read-text"></i>';

  // Here is I use standard materialaize icons
  // link.innerHTML =
  //   '<i class="material-icons red-text">remove_circle_outline</i>';

  // Alternative way to make an icon

  // Create icon

  const iconRemove = document.createElement('i');

  // Add a class to iconRemove

  iconRemove.className =
    'material-icons red-text db-delete-item secondary-content';

  // Add textNode to iconRemove

  iconRemove.appendChild(document.createTextNode('remove_circle_outline'));
  /*
  // Append icon to li as a child

  // link.appendChild(iconRemove);

  // Append link to li

  // li.appendChild(link);
  */

  li.appendChild(iconRemove);

  // Append li to ul as a child

  taskList.appendChild(li);

  // Store tasks in local storage

  storeTaskInLocalStorage(taskInput.value);

  // Clear inputTask

  taskInput.value = '';

  // Prevent default form action

  e.preventDefault();

  // Dev only

  // console.log(iconRemove);
  // console.log(link);
  // console.log(li);

  /**
   * JSDocs comments generated by VSCode
   */
}

function storeTaskInLocalStorage(taskText) {
  // Initiate Array tasks

  let tasks = [];

  if (localStorage.getItem('tasks') !== null) {
    tasks = JSON.parse(localStorage.getItem('tasks'));
  }
  tasks.push(taskText);

  localStorage.setItem('tasks', JSON.stringify(tasks));
}

// Declare fetchTasks func

function fetchTasks() {
  // Get tasks from LocalStorage
  let tasks = [];

  if (localStorage.getItem('tasks') !== null) {
    tasks = JSON.parse(localStorage.getItem('tasks'));
  }

  tasks.forEach((task) => {
    // Create lis and append them to ul
    // Create li element

    const li = document.createElement('li');

    // Add a class

    li.className = 'collection-item';

    //  Create text node and append to li

    li.appendChild(document.createTextNode(task));

    const iconRemove = document.createElement('i');

    // Add a class to iconRemove

    iconRemove.className =
      'material-icons red-text db-delete-item secondary-content';

    // Add textNode to iconRemove

    iconRemove.appendChild(document.createTextNode('remove_circle_outline'));

    // Append iconRemove to ul as a child

    li.appendChild(iconRemove);

    // Append li to ul as a child

    taskList.appendChild(li);
  });
}

function removeTask(e) {
  // Check if clicl is on iconRemove. if Yes - remove task

  if (e.target.classList.contains('db-delete-item')) {
    // Confirm removing and remove task

    if (confirm('Are You Sure?')) {
      e.target.parentElement.remove();
      // Remove from LocalStorage

      removeTaskFromLocalStorage(e.target.parentElement.firstChild.textContent);
    }

    // console.log(e.target);
  }
}

// Declare removeTaskFromLocalStorage func

function removeTaskFromLocalStorage(taskText) {
  // Get tasks from LS

  let tasks = [];

  if (localStorage.getItem('tasks') !== null) {
    tasks = JSON.parse(localStorage.getItem('tasks'));
  }

  // If taskText == element of tasks array then splice it from the array
  tasks.forEach((el, index) => {
    if (el === taskText) {
      tasks.splice(index, 1); // eslint-disable-line no-magic-numbers
    }
  });

  // Save tasks array to LS

  localStorage.setItem('tasks', JSON.stringify(tasks));

  console.log(taskText, tasks); // eslint-disable-line
}

// Define clearAllTasks for clearBtn

function clearAllTasks() {
  if (confirm('Are You Sure?')) {
    // first way

    // taskList.innerHTML = '';

    // Faster way under the article delivired by Brad
    // https://jsperf.com/innerhtml-vs-removechild
    // but link is broken

    while (taskList.firstChild) {
      taskList.removeChild(taskList.firstChild);
    }
    // Remove tasks element from LocalStorage

    localStorage.removeItem('tasks');
  }
  // console.log(e.target); // eslint-disable-line
}

function filterTasks(e) {
  const textFilter = e.target.value.toLowerCase();

  // Get all li items

  document.querySelectorAll('.collection-item').forEach((task) => {
    const item = task.firstChild.textContent;

    // Es-lint rule no-magic numbers
    /* eslint-disable-next-line no-unused-vars */
    const noIndexOf = -1;

    /* eslint-disable */
    // console.info(item.toLowerCase().indexOf(textFilter));
    /* eslint-enable */

    // Eslint said negative conditions is difficult to read it's better use positive conditions

    if (item.toLowerCase().indexOf(textFilter) === noIndexOf) {
      task.style.display = 'none';
    } else {
      task.style.display = 'block';
    }

    /* eslint-disable-next-line no-console */
    // console.info(item);
  });

  // devs only
  // Test of disable eslint rule
  /* eslint-disable-next-line */
  // console.info(textFilter);
}
